{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// hooks.js\nimport { useState, useEffect } from \"react\";\n\n// Define your API_BASE outside the hook\nconst API_BASE = \"https://api.sleeper.app/v1\";\nexport function useUser() {\n  _s();\n  const [username, setUsername] = useState(null);\n  const [inputUsername, setInputUsername] = useState(\"\");\n  const [userData, setUserData] = useState(null);\n  useEffect(() => {\n    if (username) fetchUserData(username);\n  }, [username]);\n  const fetchUserData = async username => {\n    const userDataResponse = await fetch(`${API_BASE}/user/${username}`);\n    const userData = await userDataResponse.json();\n    setUserData(userData);\n  };\n  const handleUsernameChange = event => {\n    setInputUsername(event.target.value);\n  };\n  const handleConfirmUser = () => {\n    setUsername(inputUsername);\n  };\n  return {\n    username,\n    handleUsernameChange,\n    handleConfirmUser,\n    userData\n  };\n}\n_s(useUser, \"5zX0cE8NPwrgOAf0BixAYuzqTVU=\");\nexport function useLeague(username) {\n  _s2();\n  const [leagues, setLeagues] = useState([]);\n  const [selectedLeague, setSelectedLeague] = useState(null);\n  const [rosters, setRosters] = useState(null);\n  const [confirmedLeague, setConfirmedLeague] = useState(false);\n  useEffect(() => {\n    if (username) fetchUserLeagues(username);\n  }, [username]);\n  useEffect(() => {\n    if (confirmedLeague) fetchLeagueDetails(selectedLeague.league_id);\n  }, [confirmedLeague]);\n  const fetchUserLeagues = async username => {\n    const response = await fetch(`${API_BASE}/user/${username}/leagues/nfl/2023`);\n    const data = await response.json();\n    setLeagues(data);\n  };\n  const fetchLeagueDetails = async leagueId => {\n    const leagueUsersResponse = await fetch(`${API_BASE}/league/${leagueId}/users`);\n    const leagueUsers = await leagueUsersResponse.json();\n    const leagueTeamsResponse = await fetch(`${API_BASE}/league/${leagueId}/rosters`);\n    const leagueTeams = await leagueTeamsResponse.json();\n    const rosters = await constructTeams(leagueUsers, leagueTeams);\n    setRosters(rosters);\n  };\n  const constructTeams = async (leagueUsers, leagueTeams) => {\n    if (!leagueUsers || !leagueTeams) {\n      console.error(\"ERROR LEAGUE UERS OR LEAGUE TEAMS IS NULL OR UNDEFINED\");\n      return;\n    }\n    const teams = leagueUsers.map(async userTeam => {\n      const team = new Team(userTeam.display_name, userTeam.user_id);\n      const roster = leagueTeams.find(roster => roster.owner_id === userTeam.user_id);\n      let errorOccurred = false;\n      if (!Array.isArray(roster.players)) {\n        console.log(\"not an array\");\n        return;\n      }\n      for (const newPlayer of roster.players) {\n        let player = await getPlayerData(newPlayer);\n        if (!player) {\n          console.error(`No player found`);\n          errorOccurred = true;\n          break;\n        } else {\n          team.roster.push(player);\n        }\n      }\n      return team;\n    });\n    return Promise.all(teams);\n  };\n  const handleLeagueChange = event => {\n    const leagueId = event.target.value;\n    const selectedLeague = leagues.find(league => league.league_id === leagueId);\n    setSelectedLeague(selectedLeague);\n  };\n  const handleLeagueConfirm = () => {\n    setConfirmedLeague(true);\n  };\n  return {\n    selectedLeague,\n    handleLeagueChange,\n    handleLeagueConfirm,\n    rosters\n  };\n}\n_s2(useLeague, \"NuUmvt+vsvX2f5Bs/+IpnuJoMeg=\");","map":{"version":3,"names":["useState","useEffect","API_BASE","useUser","_s","username","setUsername","inputUsername","setInputUsername","userData","setUserData","fetchUserData","userDataResponse","fetch","json","handleUsernameChange","event","target","value","handleConfirmUser","useLeague","_s2","leagues","setLeagues","selectedLeague","setSelectedLeague","rosters","setRosters","confirmedLeague","setConfirmedLeague","fetchUserLeagues","fetchLeagueDetails","league_id","response","data","leagueId","leagueUsersResponse","leagueUsers","leagueTeamsResponse","leagueTeams","constructTeams","console","error","teams","map","userTeam","team","Team","display_name","user_id","roster","find","owner_id","errorOccurred","Array","isArray","players","log","newPlayer","player","getPlayerData","push","Promise","all","handleLeagueChange","league","handleLeagueConfirm"],"sources":["C:/FantasyFolder/reactrebuild/src/hooks.js"],"sourcesContent":["// hooks.js\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// Define your API_BASE outside the hook\r\nconst API_BASE = \"https://api.sleeper.app/v1\";\r\n\r\nexport function useUser() {\r\n  const [username, setUsername] = useState(null);\r\n  const [inputUsername, setInputUsername] = useState(\"\");\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (username) fetchUserData(username);\r\n  }, [username]);\r\n\r\n  const fetchUserData = async (username) => {\r\n    const userDataResponse = await fetch(`${API_BASE}/user/${username}`);\r\n    const userData = await userDataResponse.json();\r\n    setUserData(userData);\r\n  };\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setInputUsername(event.target.value);\r\n  };\r\n\r\n  const handleConfirmUser = () => {\r\n    setUsername(inputUsername);\r\n  };\r\n\r\n  return { username, handleUsernameChange, handleConfirmUser, userData };\r\n}\r\n\r\nexport function useLeague(username) {\r\n  const [leagues, setLeagues] = useState([]);\r\n  const [selectedLeague, setSelectedLeague] = useState(null);\r\n  const [rosters, setRosters] = useState(null);\r\n  const [confirmedLeague, setConfirmedLeague] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (username) fetchUserLeagues(username);\r\n  }, [username]);\r\n\r\n  useEffect(() => {\r\n    if (confirmedLeague) fetchLeagueDetails(selectedLeague.league_id);\r\n  }, [confirmedLeague]);\r\n\r\n  const fetchUserLeagues = async (username) => {\r\n    const response = await fetch(\r\n      `${API_BASE}/user/${username}/leagues/nfl/2023`\r\n    );\r\n    const data = await response.json();\r\n    setLeagues(data);\r\n  };\r\n\r\n  const fetchLeagueDetails = async (leagueId) => {\r\n    const leagueUsersResponse = await fetch(\r\n      `${API_BASE}/league/${leagueId}/users`\r\n    );\r\n    const leagueUsers = await leagueUsersResponse.json();\r\n\r\n    const leagueTeamsResponse = await fetch(\r\n      `${API_BASE}/league/${leagueId}/rosters`\r\n    );\r\n    const leagueTeams = await leagueTeamsResponse.json();\r\n\r\n    const rosters = await constructTeams(leagueUsers, leagueTeams);\r\n    setRosters(rosters);\r\n  };\r\n\r\n  const constructTeams = async (leagueUsers, leagueTeams) => {\r\n    if (!leagueUsers || !leagueTeams) {\r\n      console.error(\"ERROR LEAGUE UERS OR LEAGUE TEAMS IS NULL OR UNDEFINED\");\r\n      return;\r\n    }\r\n    const teams = leagueUsers.map(async (userTeam) => {\r\n      const team = new Team(userTeam.display_name, userTeam.user_id);\r\n      const roster = leagueTeams.find(\r\n        (roster) => roster.owner_id === userTeam.user_id\r\n      );\r\n      let errorOccurred = false;\r\n\r\n      if (!Array.isArray(roster.players)) {\r\n        console.log(\"not an array\");\r\n        return;\r\n      }\r\n\r\n      for (const newPlayer of roster.players) {\r\n        let player = await getPlayerData(newPlayer);\r\n\r\n        if (!player) {\r\n          console.error(`No player found`);\r\n          errorOccurred = true;\r\n          break;\r\n        } else {\r\n          team.roster.push(player);\r\n        }\r\n      }\r\n\r\n      return team;\r\n    });\r\n\r\n    return Promise.all(teams);\r\n  };\r\n\r\n  const handleLeagueChange = (event) => {\r\n    const leagueId = event.target.value;\r\n    const selectedLeague = leagues.find(\r\n      (league) => league.league_id === leagueId\r\n    );\r\n    setSelectedLeague(selectedLeague);\r\n  };\r\n\r\n  const handleLeagueConfirm = () => {\r\n    setConfirmedLeague(true);\r\n  };\r\n\r\n  return { selectedLeague, handleLeagueChange, handleLeagueConfirm, rosters };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}